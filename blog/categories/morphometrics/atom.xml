<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Morphometrics | Creative morphometrics]]></title>
  <link href="http://paulidealiste.github.io/blog/categories/morphometrics/atom.xml" rel="self"/>
  <link href="http://paulidealiste.github.io/"/>
  <updated>2014-05-03T15:42:47+02:00</updated>
  <id>http://paulidealiste.github.io/</id>
  <author>
    <name><![CDATA[Miloš Blagojević]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Modularity, Graphs and Triangulations]]></title>
    <link href="http://paulidealiste.github.io/blog/2014/05/03/modularity-graphs-and-triangulations/"/>
    <updated>2014-05-03T00:08:25+02:00</updated>
    <id>http://paulidealiste.github.io/blog/2014/05/03/modularity-graphs-and-triangulations</id>
    <content type="html"><![CDATA[<p>Continuing on the previous post, procedures presented here show the comparison between the usual assesment of modularity in the collection of landmarks (same dataset as before) and the depiction of modular structure through graph theory. Usually, modularity in the mammalian cranium is determined a-priori, according to some of the established hypotheses about the developmental origin of cranial elements. One of the most prevalent hypotheses is the two-module organization, one module comprising of elements originating mainly from the neural crest embryonic tissue (anterior cranium) and one comprising of elements with somitomeric origin (posterior cranium). Following code shows the test of this specific hypothesis using <em>geomorph</em> package functions, and additional usage of <em>deldir</em> for visualization of modularity hypotheses.</p>

<p>```r Importing data, basic GM, modularity and plots
library(geomorph)
library(deldir)
library(ggplot2)
load(&ldquo;capSample.RData&rdquo;)
theme_set(theme_bw())</p>

<p>capGPA &lt;&ndash; gpagen(capSample)
capCoords &lt;&ndash; capGPA$coords
mshapeCap &lt;&ndash; mshape(capCoords) #mean shape is useful for plotting</p>

<h1>vector depicting the division of landmarks according to modularity</h1>

<p>modularity1.gps &lt;&ndash; c(&ldquo;A&rdquo;,&ldquo;A&rdquo;,&ldquo;A&rdquo;,&ldquo;A&rdquo;,&ldquo;A&rdquo;,&ldquo;A&rdquo;,&ldquo;A&rdquo;,&ldquo;A&rdquo;,&ldquo;B&rdquo;,&ldquo;B&rdquo;,&ldquo;A&rdquo;,&ldquo;B&rdquo;,&ldquo;B&rdquo;,&ldquo;B&rdquo;,&ldquo;B&rdquo;,&ldquo;B&rdquo;)</p>

<h1>test for modularity based on the RV coefficient</h1>

<p>modularity1 &lt;&ndash; compare.modular.partitions(capCoords, landgroups = modularity1.gps)</p>

<h1>plot of landmark membership to a-priori modules</h1>

<p>deldir(mshapeCap[,1], mshapeCap[,2], plotit = TRUE, wlines = &ldquo;triang&rdquo;, xlim = c(-0.2,0.55))
points(mshapeCap[c(1:8,11),1], mshapeCap[c(1:8,11),2], col = &ldquo;#FF8740&rdquo;, pch = 19, cex = 1.2)
points(mshapeCap[c(9,10,12:16),1], mshapeCap[c(9,10,12:16),2], col = &ldquo;#61B4CF&rdquo;, pch = 19, cex = 1.2)
legend(0.2,0.4, legend = c(&ldquo;neural crest&rdquo;, &ldquo;somitomere&rdquo;), fill = colormap)
```</p>

<p>Figure 1 shows the theoretical distribution of the RV coefficients, calculated for all posible two-module subdivisions of landmarks, as well as the observed RV value from the hypothesis depicted in Figure 2. Since the observed value is lower than most of the hypothetic values, then it could be said that this modularity hypothesis stands.</p>

<p><img class="center" src="/images/RVmodularity.png" width="570" height="497" title="&lsquo;RV coefficients&rsquo;" >
<img class="center" src="/images/modularityLand.png" width="344" height="376" title="&lsquo;Modularity hypothesis&rsquo;" ></p>

<p>The idea for using graph theory representation and analysis of modularity is based on correlation matrix, same one from the previous post. Correlation matrix was obtained through Delaunay triangulation and every vertex (node) in the graph actually represents the 1/3 of the total area of all Delaunay triangles emanating from the corresponding landmark.</p>

<p><code>r Delaunay triangulation and derivation of the correlation matrix
cicoCap &lt;- t(apply(capCoords, 3, function(A) deldir(A[,1],A[,2])$summary[,4]))
cicoCap &lt;- data.frame(cicoCap)
names(cicoCap) &lt;- paste("lm", c(1:16), sep = "")
capCor &lt;- abs(cor(cicoCap)) #correlation matrix
diag(capCor) &lt;- 0 #diagonals must be set to zero
</code></p>

<p>Graph based on the correlation matrix can be created and manipulated with the wonderful <em>igraph</em> package. Vertices of this graph will be abovementioned areas, while the edges will represent correlation (edge weights) between areas around each landmark. According to weights, edges can be colored and the strength of thier lines increased, so that the most correlated landmarks wolud be more obvious.</p>

<p><code>r iGraph graph creation and manipulation
graph &lt;- graph.adjacency(capCor, weighted=TRUE, mode="upper")
E(graph)[ weight &gt; 0.5 ]$color &lt;- "#A63E00"
E(graph)[ weight &gt; 0.5 ]$width &lt;- 3.6
E(graph)[ weight &gt; -0.5 &amp; weight &lt; 0.5 ]$color &lt;- "#D6EBFF"
E(graph)[ weight &gt; -0.5 &amp; weight &lt; 0.5 ]$width &lt;- 1.2
</code></p>

<p>Modularity, or community structure in the graph theory represents the degree of compartmentalization in the graph structure, based on the spatial relationship or the weights of graph edges. Although, a-priori subdivision of graph vertices is possible, and the evaluation of such graph community can be easily done, the advantage of graph theory for modularity is the availability of algorithms for searching the community structure, so it can derive subdivsion a-posteriori, that can be compared to the hypothesis from Figure 1.</p>

<p>```r Graph modularity and plotting
gsc &lt;&ndash; leading.eigenvector.community(graph, weights = E(graph)$weights)
modularity(graph, membership(gsc))
colormap &lt;&ndash; c(&ldquo;#FF8740&rdquo;, &ldquo;#61B4CF&rdquo;)
V(graph)$color &lt;&ndash; colormap[gsc$membership] #color graph vertices according to community</p>

<h1>graph layout will be circular since values for the edges range from 0.2 to 0.9,</h1>

<h1>and they all form similar attractive force between the vertices.</h1>

<p>graph$layout &lt;&ndash; layout.fruchterman.reingold #really no effect on the shape of this graph</p>

<p>plot(graph, vertex.size = 20, vertex.shape = &ldquo;circle&rdquo;)
legend(0.8,1.4, legend = c(&ldquo;neural crest&rdquo;, &ldquo;somitomere&rdquo;), fill = colormap)
```</p>

<p>Leading eigenvector community algorithm tries to find community structure in the graph by calculating the eigenvector of the modularity matrix for the largest positive eigenvalue and then separating vertices into two communities based on the sign of the corresponding element in the eigenvector (Newman, 2006). This method was preffered over many others because it is closer to usual multivariate methods, such as PCA, that are commonly used to depict variability patterns.</p>

<p><img class="center" src="/images/modularityGraph.png" width="541" height="467" title="&lsquo;Modularity graph&rsquo;" ></p>

<p>Graph community strucure depicts modularity in the landmark configurations accurately, with the exception of lm16, that is positioned on the posterior basicranium. Higher correlations are, on average, present within modules while between modules, only one connection is higher than 0.5, that between lm2 and lm14. Since these landmarks lay on the opposite sides of the cranium, they may encompass the variability in total anterior-posterior length. i.e. cranial size.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Delaunay Triangulation Experiment]]></title>
    <link href="http://paulidealiste.github.io/blog/2014/04/04/delaunay-triangulation-for-modularity-pt-1/"/>
    <updated>2014-04-04T18:09:37+02:00</updated>
    <id>http://paulidealiste.github.io/blog/2014/04/04/delaunay-triangulation-for-modularity-pt-1</id>
    <content type="html"><![CDATA[<p>Since landmark data consists of x and y Cartesian coordinates, it would be useful if they could be represented by one summary number, that would preserve the spatial information. This is just a proposal of one possiblity using Delaunay triangulation between landmark configurations, and the average area of all triangles emanating from individual landmarks. Since landmark position within the triangulation grid would influence the shape and size as well as number of triangles around it, the area should preserve enoguh information about the spatial relationships of landmarks. Dataset for this post consists of ventral aspect half configurations from <a href="http://goo.gl/LP3xsd" target="_blank">here</a>. Delaunay triangulation will be performed using <em>deldir</em> R package, since it reports the mentioned triangle areas as a part of object summary.</p>

<p>```r Importing data, basic GM, calculating the triangulation, extracting areas and plotting
library(deldir)
library(geomorph)
load(&ldquo;capSample.RData&rdquo;)</p>

<p>capreolusGPA &lt;&ndash; gpagen(capSample)
capGPAcoords &lt;&ndash; capreolusGPA$coords</p>

<p>delCap &lt;&ndash; deldir(capSample[,,10][,1], capSample[,,10][,2]) #extract any individual from an array for visualization
plot(delCap, col=c(&ldquo;lightblue&rdquo;,&ldquo;lightgrey&rdquo;,1,1,1), lwd = c(2,2), xlim = c(150, 400), cex = 0.1, ann = FALSE)
points(capSample[,,10], col = &ldquo;orange&rdquo;, pch = 16, cex = 1.4)
text(capSample[,,10], label = c(1:16), pos = 3, ceo = 0.5)</p>

<p>areaCap &lt;&ndash; t(apply(capGPAcoords, 3, function(A) deldir(A[,1],A[,2])$summary[,4])) #calcuate areas per landmark
areaCap &lt;&ndash; data.frame(areaCap)
names(areaCap) &lt;&ndash; paste(&ldquo;lm&rdquo;, c(1:16), sep = &ldquo;&rdquo;)
```</p>

<p><img class="center" src="/images/Delaunay.png" width="401" height="473" title="&lsquo;Delaunay&rsquo;" ></p>

<p>Values in the areaCap matrix represent average areas of all triangles emanating from the landmark in question, so its dimensions are 60x16. Correlation matrix (16x16) can be calculated from the areaCap matrix, and it should reflect relative positioning of landmarks through spatial grouping pattern. This can be checked visually using <em>corrplot</em> package visualization of the correlation matrix, which allows direct assesment of emerging patterns in the matrix. Additionally, this package allows reordering of rows and columns according to hierarchical clustering algorhithms and representing the desired number of clusters with rectangles in the correlation plot. This can only be considered as an idea of general modularity, since landmarks from the same cranial region should be correlated more than distant landmarks. But the transformation of xy coordinates to average triangle areas may have introduced non-biological variation or obscured some of the natural variation and these procedures as well as subsequent analyses may be treated only as a fun experiment and visualization tool for now.</p>

<p><code>r Drawing correlation plot
library(corrplot)
capCor &lt;- cor(areaCap)
corrplot(capCor, method = "circle", tl.cex = 0.93, order = "hclust", addrect = 3)
</code></p>

<p><img class="center" src="/images/Corrplot.png" width="570" height="529" title="&lsquo;Delaunay&rsquo;" ></p>

<p>Correlation plot with three proposed general landmark groups in the matrix reveals that the correlations are, on average, higher for locally grouped landmaks, especially the anterior ones, from 1 to 7. This can`t be used as a reliablie test for modularity hypothesis, but it can serve as a basis for further analyses based on construcing linked graphs or networks using correlation matrices from landmark data, where the xy coordinates are transformed to one number. Also this can be a useful way of representing modular structure visually, since both Delaunay and correlation plots are highly customizable, and can be colored according to real modularity hypotheses. Testing some of these will be the subject of future posts.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Forcing Monsters` Shape]]></title>
    <link href="http://paulidealiste.github.io/blog/2014/03/08/python-forcing-monsters%60-shape/"/>
    <updated>2014-03-08T11:49:21+01:00</updated>
    <id>http://paulidealiste.github.io/blog/2014/03/08/python-forcing-monsters`-shape</id>
    <content type="html"><![CDATA[<p>Continuing on one of the previous posts about data generation in python, next natural step in the analytic procedure is the Procrustes superimposition. Since this procedure enables direct analyses of configurations` shape, and all subsequent explorative visualizations, it must be employed first. This post concerns with the basic superimposition procedure, involving only two landmark configurations, i.e. two generated monsters. One monster will be used as a reference and one as a target, which should undergo superimposition. First steps in data genration are the same as before, with the exception of polarRotator function that can take any numpy array and reorder it according to polar rotation angle. This is very useful since generated landmarks are not ordered properly and do not &ldquo;feel natural&rdquo; in plots and analyses.</p>

<p>```r Library import, data generation and some functions</p>

<p>import numpy as np
import pandas as pd
import matplotlib.pyplot as plt</p>

<p>def centsize(M):   #centroid size of any configuration matrix
  p = M.shape[0]
  csize = np.sqrt(np.sum(M.var(0))*(p-1))
  return csize</p>

<p>def polarRotator(M):   #polar rotation for natural ordering of landmarks
  x = np.array(M[:,0])
  y = np.array(M[:,1])
  points = np.array((x,y)).T
  cent = (np.sum(x)/len(M), np.sum(y)/len(M))
  angle = np.arctan2(points[:,1]-cent[1],points[:,0]-cent[0])
  points = pd.DataFrame(points, columns = [&lsquo;x&rsquo;,&lsquo;y&rsquo;])
  angle = pd.Series(angle)
  points[&lsquo;angle&rsquo;] = angle
  points = points.sort(&lsquo;angle&rsquo;)
  rotatedMat = np.array(points[[&lsquo;x&rsquo;,&lsquo;y&rsquo;]])
  return rotatedMat</p>

<p>coordstest = np.vstack([np.random.uniform(175, 220, 10), np.random.uniform(175, 220, 10)]).T
monster1 = np.vstack([np.random.multivariate_normal(coordstest[i,:], [[3,0],[0,3]], 1) for i in range(10)])
monster2 = np.vstack([np.random.multivariate_normal(coordstest[i,:], [[3,0],[0,3]], 1) for i in range(10)])</p>

<p>monster1 = polarRotator(monster1)
monster2 = polarRotator(monster2)
```
The plot of configurations reveals their spatial relationship, as well as the general mean shape. This time, since landmarks are ordered properly, one line would be enough for representing mean shapes, and shapes of respective configurations.</p>

<p>```r Plotting the original monsters</p>

<p>plt.scatter(monster1[:,0], monster1[:,1], s = 80, c = &ldquo;#FFD200&rdquo;, edgecolors = &lsquo;none&rsquo;, label = &ldquo;monster1&rdquo;)
plt.plot(monster1[:,0], monster1[:,1], &lsquo;&mdash;&rsquo;, color = &ldquo;#FFD200&rdquo;)
plt.scatter(monster2[:,0], monster2[:,1], s = 80, c = &ldquo;#47BFDD&rdquo;, edgecolors = &lsquo;none&rsquo;, label = &ldquo;monster2&rdquo;)
plt.plot(monster2[:,0], monster2[:,1], &lsquo;&mdash;&rsquo;, color = &ldquo;#47BFDD&rdquo;)</p>

<p>meanMon = (monster1 + monster2) / 2 #calculate mean shape
plt.scatter(meanMon[:,0], meanMon[:,1], s = 90, c = &ldquo;#6a12c4&rdquo;, edgecolors = &lsquo;none&rsquo;, label = &ldquo;mean monster&rdquo;)
plt.plot(meanMon[:,0], meanMon[:,1], &lsquo;&ndash;&rsquo;, color = &ldquo;#6a12c4&rdquo;)</p>

<p>labels = [&lsquo;Landmark {0}&rsquo;.format(i) for i in range(10)]
for label, x, y in zip(labels, meanMon[:,0], meanMon[:,1]): #annotate mean landmarks by numbers
  plt.annotate(label, xy = (x, y+0.3), ha = &lsquo;right&rsquo;, va = &lsquo;bottom&rsquo;)</p>

<p>plt.grid()
plt.legend(loc = &ldquo;lower left&rdquo;)
```</p>

<p><img class="center" src="/images/example1preProc.png" width="616" height="462" title="&lsquo;pre Procrustes 1&rsquo;" >
<img class="center" src="/images/example2preProc.png" width="616" height="457" title="&lsquo;pre Procrustes 2&rsquo;" ></p>

<p>Procrustes superimposition revolves around three features of shape extraction, that is invariance of landmark configurations to position, scale and rotation. There are a number of excelent textbooks about the mathematics and logic, as well as procedures for Procrustes superimposition (Bookstein, 1991, Dryden and Mardia, 1998, Zelditch et al., 2012), but for this post direct inspiration was <em>Morphometrics in R</em> (Claude, 2008), especially with the basic procedure presented in the following function definition.</p>

<p>```r Partial Procrustes superimposition of two configurations</p>

<p>def pProc(mat1, mat2):
  k = mat1.shape[1]-1
  m = mat1.shape[0]
  sscaledMat1 = mat1 / centsize(mat1) #scaling and centering
  sscaledMat2 = mat2 / centsize(mat2)
  z1 = sscaledMat1 &ndash; [sscaledMat1[:,0].mean(), sscaledMat1[:,1].mean()]
  z2 = sscaledMat2 &ndash; [sscaledMat2[:,0].mean(), sscaledMat2[:,1].mean()]
  tempSv = np.dot(np.transpose(z2), z1) #rotation
  svdMat = np.linalg.svd(tempSv)
  U = svdMat[0]
  V = svdMat[2]
  Ds = svdMat[1]
  tempSig = np.linalg.det(np.dot(np.transpose(z1), z2))
  sig = np.sign(tempSig)
  Ds[k] = sig * np.absolute(Ds[k])
  U[:,k] = sig * U[:,k]
  Gam = np.dot(V, np.transpose(U))
  beta = np.sum(Ds)
  pmat1 = np.dot(z1, Gam)
  pmat2 = z2
  tempRot = vstack((pmat1, pmat2))
  rotatedMat = pd.DataFrame(tempRot, columns = [&lsquo;x&rsquo;,&lsquo;y&rsquo;])
  return rotatedMat
<code>``
Plot of the superimposed configurations reveals that the Procrustes python was really able to force monsters</code> shape be more similar, removing the effects of orientation, size and rotation.</p>

<p>```r Plot of the superimposed configurations</p>

<p>rotatedMon = pProc(monster1, monster2)
rotatedMon1 = np.array(rotatedMon[:10])
rotatedMon2 = np.array(rotatedMon[10:20])</p>

<p>plt.scatter(rotatedMon1[:,0], rotatedMon1[:,1], s = 80, c = &ldquo;#FFD200&rdquo;, edgecolors = &lsquo;none&rsquo;, label = &ldquo;super monster1&rdquo;)
plt.plot(rotatedMon1[:,0], rotatedMon1[:,1], &lsquo;&mdash;&rsquo;, color = &ldquo;#FFD200&rdquo;)
plt.scatter(rotatedMon2[:,0], rotatedMon2[:,1], s = 80, c = &ldquo;#47BFDD&rdquo;, edgecolors = &lsquo;none&rsquo;, label = &ldquo;super monster2&rdquo;)
plt.plot(rotatedMon2[:,0], rotatedMon2[:,1], &lsquo;&mdash;&rsquo;, color = &ldquo;#47BFDD&rdquo;)</p>

<p>meanRotMon = (rotatedMon1 + rotatedMon2) / 2
plt.scatter(meanRotMon[:,0], meanRotMon[:,1], s = 90, c = &ldquo;#6a12c4&rdquo;, edgecolors = &lsquo;none&rsquo;, label = &ldquo;super mean monster&rdquo;)
plt.plot(meanRotMon[:,0], meanRotMon[:,1], &lsquo;&ndash;&rsquo;, color = &ldquo;#6a12c4&rdquo;)</p>

<p>labelsRot = [&lsquo;Landmark {0}&rsquo;.format(i) for i in range(10)]
for label, x, y in zip(labelsRot, meanRotMon[:,0], meanRotMon[:,1]): #annotate mean landmarks by numbers
  plt.annotate(label, xy = (x, y+0.01), ha = &lsquo;right&rsquo;, va = &lsquo;bottom&rsquo;)</p>

<p>plt.grid()
plt.legend(loc = &ldquo;lower left&rdquo;)
```</p>

<p><img class="center" src="/images/example1Proc.png" width="616" height="454" title="&lsquo;Procrustes monster&rsquo;" >
<img class="center" src="/images/example2Proc.png" width="616" height="452" title="&lsquo;Procrustes monster 2&rsquo;" ></p>

<p>Following posts should continue on this one and describe how the partial Procrustes superimposition for multilple configurations can be performed with fabulous sientific python.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[R Generator and a Colorful PCA]]></title>
    <link href="http://paulidealiste.github.io/blog/2014/02/23/r-generator-and-a-colorful-pca/"/>
    <updated>2014-02-23T11:24:16+01:00</updated>
    <id>http://paulidealiste.github.io/blog/2014/02/23/r-generator-and-a-colorful-pca</id>
    <content type="html"><![CDATA[<p>As simple as it may seem, sample data generation is not a trivial task, especially when random landmarks are to be generated. Usually, one would use multivariate normal distribution-based generator (like mvrnorm in R`s MASS package) in order to generate correlated data. The following function was used to generate data similar to the real world datased, unfortunately based directly on it, by using the coefficients from regressions between successive columns in a data matrix, which represent landmark coordinates in XY data matrix. The following function uses <a href="http://goo.gl/ijI1kn" target="_blank">this</a> data matrix (446 individuals and 28 landmarks), and performs regressions between X-Y pairs for all coordinates. Finally it uses intercepts and slopes to infer mean and SD for rnorm function, random number generator.</p>

<p>```r Resampler function for random resamples of a real data matrix</p>

<p>resampler &lt;&ndash; function(mat) #simulations based on rnorm random sampling
{
  x &lt;&ndash; dim(mat)[1]
  y &lt;&ndash; dim(mat)[2]
  indexrow &lt;&ndash; c(2:x)
  combinations &lt;&ndash; matrix(c(1:y,2:y), ncol = 2) #ignore the warning message
  slope &lt;&ndash; numeric(y)
  intercept &lt;&ndash; numeric(y)
  sds &lt;&ndash; numeric(y)
  for(i in 1:y)
  {</p>

<pre><code>veca &lt;- mat[,combinations[i,]][,1]
vecb &lt;- mat[,combinations[i,]][,2]
model &lt;- lm(veca~vecb)
slope[i] &lt;- coef(model)[2]
intercept[i] &lt;- coef(model)[1]
sds[i] &lt;- sd(mat[,combinations[i,]][,1])
</code></pre>

<p>  }
  coefs &lt;&ndash; data.frame(intercept,slope,sds)
  cexox &lt;&ndash; data.frame(c(1:x))
  for (i in 1:y)
  {</p>

<pre><code>dataCol &lt;- rnorm(length(mat[,combinations[i,]][,2]),mean=intercept[i]+slope[i]*mat[,combinations[i,]][,2],sd=sds)
cexox &lt;- cbind(cexox, dataCol)
</code></pre>

<p>  }
  sampleMatrix &lt;&ndash; as.matrix(cexox)
  sampleMatrix &lt;&ndash; sampleMatrix[,-1]
  return(sampleMatrix)
}</p>

<p>resampledCap &lt;&ndash; resampler(capreolusMatrix) #resample the original matrix-generate random coordinates
```
When the function finishes the output is also an XY matrix, which needs to be converted to an array in order to use it in gpagen function from the <em>geomorph</em> package. After that the procedure follows all the usual steps of the GM analysis, with the exception of factor levels generation in order to simulate grouping, and finally performing PCA on the Procrustes shape variables.</p>

<p><code>r Basic GM procedures and factor level generation
library(geomorph)
capreolusArray &lt;- arrayspecs(resampledCap, 28, 2, byLand = FALSE)
capreolusGPA &lt;- gpagen(capreolusArray, ShowPlot = FALSE)
pop &lt;- sample(5, 446, replace = TRUE) #generate random 5 population partition
pop[which(pop == 1)] &lt;- "pop1"
pop[which(pop == 2)] &lt;- "pop2"
pop[which(pop == 3)] &lt;- "pop3"
pop[which(pop == 4)] &lt;- "pop4"
pop[which(pop == 5)] &lt;- "pop5"
capreolusGPA2d &lt;- two.d.array(capreolusGPA$coords) #get the data in XY format for PCA
</code></p>

<p>PCA is then done using the usual R`s prcomp function and <em>ggplot2</em> for plotting the data points using fantastic <a href="http://colorbrewer2.org/" target="_blank">ColorBrewer</a> color schemes (which are the names of types and palettes in <em>ggplot2</em> scale_color_brewer geom). In order to fine-tune the PCA figure, the ggplot2 can also use custom fonts for plot annotation. Prior to that, fonts must be imported and registered, which is greatly facilitated by using the <em>extrafont</em> library.</p>

<p>```r PCA and ggplot2 code for a PCA scatterplot
capPCAwhole &lt;&ndash; prcomp(capreolusGPA2d)
capPCA &lt;&ndash; data.frame(capPCAwhole$x[,1], capPCAwhole$x[,2], capPCAwhole$x[,3], capPCAwhole$x[,4])
capPCA &lt;&ndash; data.frame(capPCA, pop)
names(capPCA) &lt;&ndash; c(&ldquo;PC1&rdquo;,&ldquo;PC2&rdquo;,&ldquo;PC3&rdquo;,&ldquo;PC4&rdquo;,&ldquo;pop&rdquo;) #prepare a data.frame for ggplot2
meanPCA1 &lt;&ndash; aggregate(capPCA[,1], mean, by = list(capPCA[,5])) #calculate average PC score per group for plotting
meanPCA2 &lt;&ndash; aggregate(capPCA[,2], mean, by = list(capPCA[,5]))
meanPCA &lt;&ndash; data.frame(meanPCA1, meanPCA2[,2])
names(meanPCA) &lt;&ndash; c(&ldquo;pop&rdquo;,&ldquo;PC1&rdquo;,&ldquo;PC2&rdquo;)</p>

<p>library(extrafont) #for using i.e. Times New Roman Fonts in ggplots
font_import(pattern=&ldquo;[T/t]imes&rdquo;) #this imports Times font family
loadfonts(device=&ldquo;pdf&rdquo;)</p>

<p>library (ggplot2)
theme_set(theme_bw())
pcaplot &lt;&ndash; ggplot(capPCA, aes(x=PC1, y=PC2, group = pop)) + geom_point(size = 7, shape = 19, aes(color=pop)) + scale_color_brewer(palette=&ldquo;Set1&rdquo;)
pcaplot &lt;&ndash; pcaplot + theme(panel.grid.major = element_line(size = 0.8, linetype = 2)) + theme(panel.grid.minor = element_line(size = 1, linetype = 2))
pcaplot &lt;&ndash; pcaplot + theme(text=element_text(size=20, family=&ldquo;Times New Roman&rdquo;), legend.text=element_text(size = 22, family = &ldquo;Times New Roman&rdquo;), legend.title = element_text(family =&ldquo;Times New Roman&rdquo;)) + xlab(&ldquo;PC1&rdquo;) + ylab(&ldquo;PC2&rdquo;)
pcaplot &lt;&ndash; pcaplot + geom_point(data = meanPCA, size = 14, shape = 19) + geom_text(data = meanPCA, size = 10, label = meanPCA$pop, family = &ldquo;Times New Roman&rdquo;, vjust = -0.9)
pcaplot
```</p>

<p><img class="center" src="/images/pcaplot.png" width="616" height="466" title="&lsquo;PCA&rsquo;" ></p>

<p>The plot indicates very little differentiation between the populations, but I guess that`s well expected since so much randomness is at hand.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XY Outlines in GIMP and imageJ]]></title>
    <link href="http://paulidealiste.github.io/blog/2014/02/01/xy-outlines-in-gimp-and-imagej/"/>
    <updated>2014-02-01T11:23:55+01:00</updated>
    <id>http://paulidealiste.github.io/blog/2014/02/01/xy-outlines-in-gimp-and-imagej</id>
    <content type="html"><![CDATA[<p>This post continues on the first post about outline deformations and presents a simple way for generating outlines as XY data. XY format is very convenient for representing outline and line art in R or python. This type of visualization can be produced using <a href="http://www.gimp.org" target="_blank">GIMP</a> and <a href="http://rsbweb.nih.gov/ij" target="_blank">imageJ</a> through a sequence of easy steps. GIMP enables easy extraction of the central object from the image background. First step in outline extraction should be the precise definition of the object boundaries, such that the contrast between the object and the background is maximal. Example picture for this post is available <a href="http://goo.gl/bkirX7" target="_blank">here</a>. After opening the picture in GIMP workspace it looks like in Figure 1.</p>

<p><img src="/images/Gimp1.png" width="375" height="289" title="&lsquo;Gimp import&rsquo;" > <img class="right" src="/images/Gimp2.png" width="375" height="290" title="&lsquo;Gimp scissors&rsquo;" ></p>

<p>The easiest way to separate this chamois cranium from its background is to use <code>Scissor Select Tool</code> from the GIMP toolbox. This tool can nicely track the path between sucessive control points that should be placed along the desired object (Figure 2). When control points are placed along the shape, selection can be completed by pressing enter, and the background can be deleted by inverting selection pressing <code>Ctrl+I</code>. and deleting it using the delete key (Figure 3). Selection should be inverted once more and converted to path; from the <code>Select</code> menu <code>To Path</code>. Finally, stroke path (Figure 4, path card and right click on selection, <code>Stroke path</code>) gives the desired outline that can be exported as .tiff for imageJ through <code>Export</code> in the <code>File</code> menu.</p>

<p><img src="/images/Gimp3.png" width="375" height="290" title="&lsquo;Gimp no background&rsquo;" > <img class="right" src="/images/Gimp4.png" width="375" height="289" title="&lsquo;Gimp stroke path&rsquo;" ></p>

<p>In imageJ, picture should be converted to binary in <code>Process</code> menu, by selecting <code>Binary</code> and <code>Make Binary</code>. Final step is saving the binary image selection as XY data. First the outline should be selected by the magic wand selection tool (Figure 5) and then the image should be saved in XY format, in <code>File</code> menu, <code>Save as</code> and select <code>XY coordinates</code>. The XY data is also available <a href="http://goo.gl/d44PxK" target="_blank">here</a>.</p>

<p><img src="/images/GimpNo.png" width="310" height="326" title="&lsquo;imageJ&rsquo;" ></p>

<p>Now the .txt file could be easily imported into R and python.</p>
]]></content>
  </entry>
  
</feed>
