<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | Creative morphometrics]]></title>
  <link href="http://paulidealiste.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://paulidealiste.github.io/"/>
  <updated>2014-06-09T18:49:34+02:00</updated>
  <id>http://paulidealiste.github.io/</id>
  <author>
    <name><![CDATA[Miloš Blagojević]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Complete Procrustes in Python]]></title>
    <link href="http://paulidealiste.github.io/blog/2014/05/17/complete-procrustes-in-python/"/>
    <updated>2014-05-17T20:38:16+02:00</updated>
    <id>http://paulidealiste.github.io/blog/2014/05/17/complete-procrustes-in-python</id>
    <content type="html"><![CDATA[<p>Procrustes superimposition is the first analytic step in geometric morphometrics and this post shows one possible solution to performing it in Python<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>, using several functions defined in previous posts. First steps include data generation and definition of functions important for extracting shape variables from randomly generated landmark data. These functions are <em>centsize</em> which calculates centroid size from a numpy array (xy data) and <em>transScale</em> which translates landmark coordinates to the origin of the coordinate system and scales them to unit centroid size. The <em>mshapr</em> function is needed in the main superimposition function since it calculates succesive mean shapes (all configurations), excluding the configuration that is currently being rotated.</p>

<p>``` r Import libraries, function definition and data generation
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import scipy.spatial.distance as sd</p>

<p>def centsize(M): #centroid size
  p = M.shape[0]
  csize = np.sqrt(np.sum(M.var(0))*(p-1))
  return csize</p>

<p>def transScale(M):  #translation and scale
  tM = M &ndash; M.mean()
  centSize = centsize(M)
  tM = tM / centSize
  return tM</p>

<p>def mshapr (pdf):  #which is a pandas DataFrame, coordinates and individuals columns
  meanShapes = pd.DataFrame()
  dimen = len(allCoords.individuals.unique())
  for ind in range(0, dimen):</p>

<pre><code>temp = pdf[pdf.individuals != ind]
meanShape = temp.iloc[:,0:2].groupby(temp.iloc[:,2]).mean()
meanShapes = meanShapes.append(meanShape)
</code></pre>

<p>  return meanShapes</p>

<p>coordstest = np.vstack([np.random.uniform(175, 220, 10),   #usual data generation</p>

<pre><code>                    np.random.uniform(175, 220, 10)]).T 
</code></pre>

<p>coords = np.vstack([np.random.multivariate_normal(coordstest[i,:], [[3,0],[0,3]], 200) for i in range(10)])
coordinates = pd.Series((np.arange(0,10).reshape(-1,1)<em>np.ones(200).reshape(1,-1)).flatten()) #coordinates column
individuals = np.tile(np.arange(0,200),10) #individuals column
allCoords = pd.DataFrame(coords, columns = [&lsquo;x&rsquo;,&lsquo;y&rsquo;])
allCoords[&lsquo;coordinates&rsquo;] = coordinates
allCoords[&lsquo;individuals&rsquo;] = individuals
allCoords = allCoords.sort_index(by = [&lsquo;individuals&rsquo;,&lsquo;coordinates&rsquo;])
```
Definition of the </em>pProc<em> function follows the same rules as in the previous post, with the robust (and ugly for now) if clause that is only included to allow either pandas DataFrame or a numpy array as the input data (both for configurations and mean shape objects). It also returns only the rotated matrix, landmark configuration (</em>pmat1*) and not the mean shape.</p>

<p>``` r pProc function for two configuration matrices
def pProc(mat1, mat2): #returning only centred preshape of mat1 on mat2
  if type(mat1) is np.ndarray and type(mat2) is np.ndarray:</p>

<pre><code>k = mat1.shape[1]-1
m = mat1.shape[0]
sscaledMat1 = mat1 / centsize(mat1)
sscaledMat2 = mat2 / centsize(mat2)
z1 = sscaledMat1 - [sscaledMat1[:,0].mean(), sscaledMat1[:,1].mean()]
z2 = sscaledMat2 - [sscaledMat2[:,0].mean(), sscaledMat2[:,1].mean()]
tempSv = np.dot(np.transpose(z2), z1)
svdMat = np.linalg.svd(tempSv)
U = svdMat[0]
V = svdMat[2]
Ds = svdMat[1]
tempSig = np.linalg.det(np.dot(np.transpose(z1), z2))
sig = np.sign(tempSig)
Ds[k] = sig * np.absolute(Ds[k])
U[:,k] = sig * U[:,k]
Gam = np.dot(V, np.transpose(U))
beta = np.sum(Ds)
pmat1 = np.dot(z1, Gam)
pmat1 = pd.DataFrame(pmat1, columns = ['x','y'])
return pmat1
</code></pre>

<p>  else:</p>

<pre><code>mat1x = mat1.iloc[:,0]
mat1y = mat1.iloc[:,1]
mat1 = np.concatenate([mat1x, mat1y], axis = 1).reshape(mat1.shape[1],mat1.shape[0]).T
mat2x = mat2.iloc[:,0]
mat2y = mat2.iloc[:,1]
mat2 = np.concatenate([mat2x, mat2y], axis = 1).reshape(mat2.shape[1],mat2.shape[0]).T
k = mat1.shape[1]-1
m = mat1.shape[0]
sscaledMat1 = mat1 / centsize(mat1)
sscaledMat2 = mat2 / centsize(mat2)
z1 = sscaledMat1 - [sscaledMat1[:,0].mean(), sscaledMat1[:,1].mean()]
z2 = sscaledMat2 - [sscaledMat2[:,0].mean(), sscaledMat2[:,1].mean()]
tempSv = np.dot(np.transpose(z2), z1)
svdMat = np.linalg.svd(tempSv)
U = svdMat[0]
V = svdMat[2]
Ds = svdMat[1]
tempSig = np.linalg.det(np.dot(np.transpose(z1), z2))
sig = np.sign(tempSig)
Ds[k] = sig * np.absolute(Ds[k])
U[:,k] = sig * U[:,k]
Gam = np.dot(V, np.transpose(U))
beta = np.sum(Ds)
pmat1 = np.dot(z1, Gam)
pmat1 = pd.DataFrame(pmat1, columns = ['x','y'])
return pmat1
</code></pre>

<p>```</p>

<p>Finally, the <em>pGP</em> function, that can perform partial Procrustes superimposition for any number of individuals (landmark configurations) and landmarks. Generated data has 200 individuals and 10 2D landmarks. For now this function will ask such information in the function call, so that mmat1 is pandas DataFrame with x, y, coordinates and individuals columns (generated above), numind is the number of individuals, dim is 2D (3D not yet supported), and numland is the number of landmarks. For clearer understanding of the following code, comments are included where appropriate.</p>

<p>``` r Partial Procrustes Superimposition
def pGP (mmat1, numind, dim, numland):
  groupCoords = mmat1.iloc[:,0:2].groupby(mmat1.iloc[:,3])
  transCoords = groupCoords.apply(transScale) #translate and scale the sample data
  individuals = np.tile(np.arange(0,numind),numland)
  coordinates = pd.Series((np.arange(0,numland).reshape(-1,1)<em>np.ones(numind).reshape(1,-1)).flatten())
  transCoords[&lsquo;coordinates&rsquo;] = coordinates
  transCoords[&lsquo;individuals&rsquo;] = np.sort(individuals).astype(str)
  #this part of the code calculates Q-the convergence criterion
  #that is really the sum of the pairwise squared distances between all shapes in the sample
  #so that, after rotation these distances are minimized as much as possible
  arrayx = transCoords.iloc[:,0]
  arrayy = transCoords.iloc[:,1]
  forDist = np.concatenate([arrayx, arrayy], axis = 1).reshape(dim,numland</em>numind).T
  forDist = forDist.reshape(numind, numland*2) #distance function from scipy
  Qm1 = sd.pdist(forDist)
  Q = Qm1.sum()
  while absolute(Q) > 0.00001: #execute the following code until Q cannot be reduced anymore</p>

<pre><code>groupTrans = transCoords.iloc[:,0:2].groupby(transCoords.iloc[:,3])
meanShapes = mshapr(transCoords) #calculate DataFrame of mean shapes excluding one individual at the time
meanShapes['individuals'] = np.sort(individuals).astype(str)
meanGroups = meanShapes.iloc[:,0:2].groupby(meanShapes.iloc[:,2])   
tempRot = pd.DataFrame()
#following for loop performs partial Procrustes superimposition (pProc function from above) between
#mean shapes and each configuration (individual)
for ind in range(0, numind): 
  tosto = pProc(groupTrans.get_group(str(ind)), meanGroups.get_group(str(ind)))
  tempRot = tempRot.append(tosto)
tempX = tempRot.iloc[:,0]
tempY = tempRot.iloc[:,1]
tempDist = np.concatenate([tempX, tempY], axis = 1).reshape(dim,numland*numind).T
tempDist = forDist.reshape(numind, numland*2)
Qm2 = sd.pdist(tempDist)
Q = Qm1.sum() - Qm2.sum()
Qm1 = Qm2 #re-calculate the convergence criterion at each step
transCoords = tempRot
</code></pre>

<p>  return tempRot
```</p>

<p>DataFrame <em>tempRot</em> holds the superimposed configurations (shape variables) that can, subsequently, be used in standard GM analyses and further. Of course, graphical display of superimposition results can be very interesting, and in this post only basic plots will be given, while some of the further posts may include more visualizations. Figure 1 shows the original raw-generated data, Figure 2 the spatial relationships between raw and superimposed data, while Figure 3 shows only superimposed data.</p>

<p>```r Plotting the data and the relationship of raw and superimposed data
procCoords = pGP(allCoords, 200,2,10) #perform superimposition
procoordinates = np.tile(np.arange(0,10),200)
procCoords[&lsquo;coordinates&rsquo;] = procoordinates
meanShape1 = allCoords.iloc[:,0:2].groupby(allCoords.iloc[:,2]).mean() #calculate mean shape for raw data
meanShape1 = pd.DataFrame(polarRotator(np.array(meanShape1))) #natural ordering for landmark labels
plt.scatter(allCoords[&lsquo;x&rsquo;], allCoords[&lsquo;y&rsquo;], s = 30, c = &ldquo;#82CDFF&rdquo;, edgecolors = &lsquo;none&rsquo;) #plot original sampled points
plt.scatter(meanShape1[0], meanShape1[1], s = 50, c = &ldquo;#7909E8&rdquo;, edgecolors = &lsquo;none&rsquo;)
plt.plot(meanShape1[0], meanShape1[1], &lsquo;&ndash;&rsquo;, color = &ldquo;#7909E8&rdquo;)
labels = [&lsquo;Landmark {0}&rsquo;.format(i) for i in range(10)]
for label, x, y in zip(labels, meanShape1[0], meanShape1[1]): #annotate mean landmarks by numbers
  plt.annotate(label, xy = (x, y+0.4),ha = &lsquo;right&rsquo;, va = &lsquo;bottom&rsquo;)
plt.grid()
meanShape2 = procCoords.iloc[:,0:2].groupby(procCoords.iloc[:,2]).mean() #calculate mean shape for superimposed data
meanShape2 = pd.DataFrame(polarRotator(np.array(meanShape2))) #natural ordering for landmark labels
plt.scatter(procCoords[&lsquo;x&rsquo;], procCoords[&lsquo;y&rsquo;], s = 30, c = &ldquo;#FFD699&rdquo;, edgecolors = &lsquo;none&rsquo;)
plt.scatter(meanShape2[0], meanShape2[1], s = 50, c = &ldquo;#7909E8&rdquo;, edgecolors = &lsquo;none&rsquo;)
plt.plot(meanShape2[0], meanShape2[1], &lsquo;&ndash;&rsquo;, color = &ldquo;#7909E8&rdquo;)
for label, x, y in zip(labels, meanShape2[0], meanShape2[1]): #annotate mean landmarks by numbers
  plt.annotate(label, xy = (x, y+0.01),ha = &lsquo;right&rsquo;, va = &lsquo;bottom&rsquo;)
plt.grid()</p>

<h1>for Figure 2 just plt.scatter of both allCoords and procCoords in the same window</h1>

<p>```
<img class="center" src="/images/rawWithout.png" width="650" height="484" title="&lsquo;raw generated landmark data&rsquo;" >
<img class="center" src="/images/originalSuperimposed.png" width="650" height="484" title="&lsquo;original vs superimposed&rsquo;" >
<img class="center" src="/images/superWith.png" width="650" height="481" title="&lsquo;superimposed landmark data&rsquo;" ></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>If using IPython (:)) best way is to paste code with the %paste magic function.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Forcing Monsters` Shape]]></title>
    <link href="http://paulidealiste.github.io/blog/2014/03/08/python-forcing-monsters%60-shape/"/>
    <updated>2014-03-08T11:49:21+01:00</updated>
    <id>http://paulidealiste.github.io/blog/2014/03/08/python-forcing-monsters`-shape</id>
    <content type="html"><![CDATA[<p>Continuing on one of the previous posts about data generation in python, next natural step in the analytic procedure is the Procrustes superimposition. Since this procedure enables direct analyses of configurations` shape, and all subsequent explorative visualizations, it must be employed first. This post concerns with the basic superimposition procedure, involving only two landmark configurations, i.e. two generated monsters. One monster will be used as a reference and one as a target, which should undergo superimposition. First steps in data genration are the same as before, with the exception of polarRotator function that can take any numpy array and reorder it according to polar rotation angle. This is very useful since generated landmarks are not ordered properly and do not &ldquo;feel natural&rdquo; in plots and analyses.</p>

<p>```r Library import, data generation and some functions</p>

<p>import numpy as np
import pandas as pd
import matplotlib.pyplot as plt</p>

<p>def centsize(M):   #centroid size of any configuration matrix
  p = M.shape[0]
  csize = np.sqrt(np.sum(M.var(0))*(p-1))
  return csize</p>

<p>def polarRotator(M):   #polar rotation for natural ordering of landmarks
  x = np.array(M[:,0])
  y = np.array(M[:,1])
  points = np.array((x,y)).T
  cent = (np.sum(x)/len(M), np.sum(y)/len(M))
  angle = np.arctan2(points[:,1]-cent[1],points[:,0]-cent[0])
  points = pd.DataFrame(points, columns = [&lsquo;x&rsquo;,&lsquo;y&rsquo;])
  angle = pd.Series(angle)
  points[&lsquo;angle&rsquo;] = angle
  points = points.sort(&lsquo;angle&rsquo;)
  rotatedMat = np.array(points[[&lsquo;x&rsquo;,&lsquo;y&rsquo;]])
  return rotatedMat</p>

<p>coordstest = np.vstack([np.random.uniform(175, 220, 10), np.random.uniform(175, 220, 10)]).T
monster1 = np.vstack([np.random.multivariate_normal(coordstest[i,:], [[3,0],[0,3]], 1) for i in range(10)])
monster2 = np.vstack([np.random.multivariate_normal(coordstest[i,:], [[3,0],[0,3]], 1) for i in range(10)])</p>

<p>monster1 = polarRotator(monster1)
monster2 = polarRotator(monster2)
```
The plot of configurations reveals their spatial relationship, as well as the general mean shape. This time, since landmarks are ordered properly, one line would be enough for representing mean shapes, and shapes of respective configurations.</p>

<p>```r Plotting the original monsters</p>

<p>plt.scatter(monster1[:,0], monster1[:,1], s = 80, c = &ldquo;#FFD200&rdquo;, edgecolors = &lsquo;none&rsquo;, label = &ldquo;monster1&rdquo;)
plt.plot(monster1[:,0], monster1[:,1], &lsquo;&mdash;&rsquo;, color = &ldquo;#FFD200&rdquo;)
plt.scatter(monster2[:,0], monster2[:,1], s = 80, c = &ldquo;#47BFDD&rdquo;, edgecolors = &lsquo;none&rsquo;, label = &ldquo;monster2&rdquo;)
plt.plot(monster2[:,0], monster2[:,1], &lsquo;&mdash;&rsquo;, color = &ldquo;#47BFDD&rdquo;)</p>

<p>meanMon = (monster1 + monster2) / 2 #calculate mean shape
plt.scatter(meanMon[:,0], meanMon[:,1], s = 90, c = &ldquo;#6a12c4&rdquo;, edgecolors = &lsquo;none&rsquo;, label = &ldquo;mean monster&rdquo;)
plt.plot(meanMon[:,0], meanMon[:,1], &lsquo;&ndash;&rsquo;, color = &ldquo;#6a12c4&rdquo;)</p>

<p>labels = [&lsquo;Landmark {0}&rsquo;.format(i) for i in range(10)]
for label, x, y in zip(labels, meanMon[:,0], meanMon[:,1]): #annotate mean landmarks by numbers
  plt.annotate(label, xy = (x, y+0.3), ha = &lsquo;right&rsquo;, va = &lsquo;bottom&rsquo;)</p>

<p>plt.grid()
plt.legend(loc = &ldquo;lower left&rdquo;)
```</p>

<p><img class="center" src="/images/example1preProc.png" width="616" height="462" title="&lsquo;pre Procrustes 1&rsquo;" >
<img class="center" src="/images/example2preProc.png" width="616" height="457" title="&lsquo;pre Procrustes 2&rsquo;" ></p>

<p>Procrustes superimposition revolves around three features of shape extraction, that is invariance of landmark configurations to position, scale and rotation. There are a number of excelent textbooks about the mathematics and logic, as well as procedures for Procrustes superimposition (Bookstein, 1991, Dryden and Mardia, 1998, Zelditch et al., 2012), but for this post direct inspiration was <em>Morphometrics in R</em> (Claude, 2008), especially with the basic procedure presented in the following function definition.</p>

<p>```r Partial Procrustes superimposition of two configurations</p>

<p>def pProc(mat1, mat2):
  k = mat1.shape[1]-1
  m = mat1.shape[0]
  sscaledMat1 = mat1 / centsize(mat1) #scaling and centering
  sscaledMat2 = mat2 / centsize(mat2)
  z1 = sscaledMat1 &ndash; [sscaledMat1[:,0].mean(), sscaledMat1[:,1].mean()]
  z2 = sscaledMat2 &ndash; [sscaledMat2[:,0].mean(), sscaledMat2[:,1].mean()]
  tempSv = np.dot(np.transpose(z2), z1) #rotation
  svdMat = np.linalg.svd(tempSv)
  U = svdMat[0]
  V = svdMat[2]
  Ds = svdMat[1]
  tempSig = np.linalg.det(np.dot(np.transpose(z1), z2))
  sig = np.sign(tempSig)
  Ds[k] = sig * np.absolute(Ds[k])
  U[:,k] = sig * U[:,k]
  Gam = np.dot(V, np.transpose(U))
  beta = np.sum(Ds)
  pmat1 = np.dot(z1, Gam)
  pmat2 = z2
  tempRot = vstack((pmat1, pmat2))
  rotatedMat = pd.DataFrame(tempRot, columns = [&lsquo;x&rsquo;,&lsquo;y&rsquo;])
  return rotatedMat
<code>``
Plot of the superimposed configurations reveals that the Procrustes python was really able to force monsters</code> shape be more similar, removing the effects of orientation, size and rotation.</p>

<p>```r Plot of the superimposed configurations</p>

<p>rotatedMon = pProc(monster1, monster2)
rotatedMon1 = np.array(rotatedMon[:10])
rotatedMon2 = np.array(rotatedMon[10:20])</p>

<p>plt.scatter(rotatedMon1[:,0], rotatedMon1[:,1], s = 80, c = &ldquo;#FFD200&rdquo;, edgecolors = &lsquo;none&rsquo;, label = &ldquo;super monster1&rdquo;)
plt.plot(rotatedMon1[:,0], rotatedMon1[:,1], &lsquo;&mdash;&rsquo;, color = &ldquo;#FFD200&rdquo;)
plt.scatter(rotatedMon2[:,0], rotatedMon2[:,1], s = 80, c = &ldquo;#47BFDD&rdquo;, edgecolors = &lsquo;none&rsquo;, label = &ldquo;super monster2&rdquo;)
plt.plot(rotatedMon2[:,0], rotatedMon2[:,1], &lsquo;&mdash;&rsquo;, color = &ldquo;#47BFDD&rdquo;)</p>

<p>meanRotMon = (rotatedMon1 + rotatedMon2) / 2
plt.scatter(meanRotMon[:,0], meanRotMon[:,1], s = 90, c = &ldquo;#6a12c4&rdquo;, edgecolors = &lsquo;none&rsquo;, label = &ldquo;super mean monster&rdquo;)
plt.plot(meanRotMon[:,0], meanRotMon[:,1], &lsquo;&ndash;&rsquo;, color = &ldquo;#6a12c4&rdquo;)</p>

<p>labelsRot = [&lsquo;Landmark {0}&rsquo;.format(i) for i in range(10)]
for label, x, y in zip(labelsRot, meanRotMon[:,0], meanRotMon[:,1]): #annotate mean landmarks by numbers
  plt.annotate(label, xy = (x, y+0.01), ha = &lsquo;right&rsquo;, va = &lsquo;bottom&rsquo;)</p>

<p>plt.grid()
plt.legend(loc = &ldquo;lower left&rdquo;)
```</p>

<p><img class="center" src="/images/example1Proc.png" width="616" height="454" title="&lsquo;Procrustes monster&rsquo;" >
<img class="center" src="/images/example2Proc.png" width="616" height="452" title="&lsquo;Procrustes monster 2&rsquo;" ></p>

<p>Following posts should continue on this one and describe how the partial Procrustes superimposition for multilple configurations can be performed with fabulous sientific python.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Random Landmark Monsters in Python]]></title>
    <link href="http://paulidealiste.github.io/blog/2014/01/17/simple-random-landmarks-in-python/"/>
    <updated>2014-01-17T11:36:06+01:00</updated>
    <id>http://paulidealiste.github.io/blog/2014/01/17/simple-random-landmarks-in-python</id>
    <content type="html"><![CDATA[<p>Generating random datasets is facilitated by powerful algorithms in both R and python that are capable of drawing random numbers from predefined distributions. For simulating geometric morphometric data the only important constraint is correlation between x and y coordinates of landmarks. Spacing of landmarks in also important, especially if the aim is to generte life-like data set, but it is not essential (hopefully) for morphometric analyses to work. Python scipy stack (<em>numpy</em>, <em>scipy</em>, <em>pandas</em> and <em>matplotlib</em> + Ipython console) is a great budnle which enables both random number generators and great visualizations. The code presented in this post uses all of these libraries, especially <em>pandas</em>, which offer the basic data structure used for storing landmark data, DataFrame. Also, it can just be pasted into Ipython console window (afer installing any of the scipy stack python distributions). The basic idea is to use uniform distribution random number generator (line 7) in order to generate ranges for the spacing of landmark groups, and then multivariate normal random distribution for creating the two-column correlated data (x, y coordinates, line 8). This code will simulate the situation with 10 landmarks recorded on 200 individuals. Spacing of landmarks can be controlled by the ranges of uniform generators (175-220 in code), and the spread of landmarks is contolled by input covariance matrix for multivariate normal generators ([[3,0],[0,3]] in code).</p>

<p>```python Importing libraries and generating random landmarks
import numpy as np
import pandas as pd
import brewer2mpl as bmpl
import matplotlib.pyplot as plt
import scipy.interpolate</p>

<p>coordstest = np.vstack([np.random.uniform(175, 220, 10), np.random.uniform(175, 220, 10)]).T #genereta coordinate ranges &ndash; spacing of landmarks
coords = np.vstack([np.random.multivariate_normal(coordstest[i,:], [[3,0],[0,3]], 200) for i in range(10)]) #correlated x and y from multivariate normal
coordinates = (np.arange(0,10).reshape(-1,1)*np.ones(200).reshape(1,-1)).flatten() #generate factor coodinates each landmark has 200 recorded points
coordinates = pd.Series(coordinates)
allCoords = pd.DataFrame(coords, columns = [&lsquo;x&rsquo;,&lsquo;y&rsquo;]) #coordinates DataFrame
allCoords[&lsquo;coordinates&rsquo;] = coordinates
meanCoords = allCoords.groupby(&lsquo;coordinates&rsquo;).mean() #mean landmark coordiantes
ind = np.arange(0,10)
ind = pd.Series(ind)
meanCoords[&lsquo;ind&rsquo;] = ind
```
allCoords contain all generated landmarks, while meanCoords is the collection of mean coordinates for each landmark. In order to visualize the generated data, a convenient &ldquo;outline&rdquo; can be drawn, connecting all landmarks smoothly. Since generated landmarks are not ordered in a way that permits simple connect-the-dots line between them, they should be rotated, and ordered differently. This can be done by using the centroid coordinates (from all landmarks) and the polar angle between the lines connecting centroid and each landmark. If polar angle is used, then landmarks (from meanCoords) can be ordered according to its value, clockwise. Polar angle can be calculated as the arctan between x and y coordinates of mean landmarks and the centroid.</p>

<p><code>python Calculating polar angle and re-ordering of the meanCoords
x = np.array(meanCoords['x']) #convenience function
y = np.array(meanCoords['y'])
points = np.array((x,y)).T
cent = (np.sum(meanCoords['x'])/len(meanCoords), np.sum(meanCoords['y'])/len(meanCoords)) #the overall centroid
angle = np.arctan2(points[:,1]-cent[1],points[:,0]-cent[0]) #summary polar angle of all points
points = pd.DataFrame(points, columns = ['x','y'])
angle = pd.Series(angle)
points['angle'] = angle
points = points.sort('angle') #sort by polar angle from the centroid
</code></p>

<p>If a path would be drawn between the mean landmarks now, it would be irregular, and not too informative. One way of constructing the smooth connection between landmarks is to use interpolation algorithms that are part of <em>scipy.interpolate</em>. One issue with this approach is the connection between the first and the last landmark, since it must be added to points DataFrame as eleventh landmark, with x,y coords the same as for the first one, in order to complete the path. This added segment behaves erratically during interpolation so the generated figures might be distorted. But this will not happen always and all program routines could be re-run as long as the desired, nice, result emerges.</p>

<p><code>python Interpolation of the outline data
x_hull = np.array(points['x'])
x_hull = np.append(x_hull, x_hull[0]) #add first landmark as the last one (x)
y_hull = np.array(points['y'])
y_hull = np.append(y_hull, y_hull[0]) #add first landmark as the last one (y)
t = np.zeros(x_hull.shape)
t[1:] = np.sqrt((x_hull[1:] - x_hull[:-1])**2 + (y_hull[1:] - y_hull[:-1])**2)
t = np.cumsum(t)
t /= t[-1]
nt = np.linspace(0, 1, 100)
x1 = scipy.interpolate.spline(t, x_hull, nt) #interpolated coordines for smooth lines
y1 = scipy.interpolate.spline(t, y_hull, nt)
</code></p>

<p>Finally, plots are produced sequentially, first all landmarks, then mean landmarks, and finally the outline.</p>

<p><code>python Plotting
plt.scatter(allCoords['x'], allCoords['y'], s = 25, c = "#FFD699", edgecolors = 'none') #plot all sampled points
plt.scatter(x, y, c = ind, s = 60, cmap = bmpl.get_map('Set3', 'qualitative', 7).mpl_colormap) #plot means with color brewer palette
plt.plot(x1, y1, '--', c = "#97CAFF", lw = 3) #plot outlines
labels = ['Landmark {0}'.format(i) for i in range(10)]
for label, x, y in zip(labels, points['x'], points['y']): #annotate mean landmarks by numbers
 plt.annotate(label, xy = (x, y+0.3),ha = 'right', va = 'bottom')
plt.grid()
</code>
<img class="center" src="/images/FigMonster1.png" width="600" height="466" title="&lsquo;First monster&rsquo;" >
<img class="center" src="/images/FigMonster2.png" width="600" height="445" title="&lsquo;Second monster&rsquo;" ></p>

<p>Generated &ldquo;monsters&rdquo; are just there to get the idea of a possible shape, although the create the impression of the &ldquo;outline&rdquo;, such that all landmarks are sampled from the outer perimeter of the object. The code presented would not be complete if it wasn`t for the help from people from stackoverflow (<a href="http://goo.gl/DWOCLJ">here</a>, <a href="http://goo.gl/y9Kpv3">here</a> and <a href="http://goo.gl/xwL4Dz">here</a>).</p>
]]></content>
  </entry>
  
</feed>
